// Place your key bindings in this file to override the defaults
[
    // open integrated terminal
    {
        "key": "cmd+j",
        "command": "workbench.action.terminal.toggleTerminal"
    },
    {
        "key": "cmd+j",
        "command": "-workbench.action.togglePanel"
    },
    {
        "key": "cmd+j",
        "command": "-editor.action.joinLines",
        "when": "editorTextFocus"
    },
    // navigate and create new integrated terminal tabs
    {
        "key": "shift+cmd+[",
        "command": "workbench.action.terminal.focusPrevious",
        "when": "terminalFocus"
    },
    {
        "key": "shift+cmd+]",
        "command": "workbench.action.terminal.focusNext",
        "when": "terminalFocus"
    },
    {
        "key": "cmd+n",
        "command": "workbench.action.terminal.newInActiveWorkspace",
        "when": "terminalFocus"
    },
    // insert cursor above/below (default bindings interfere with spectacle.app)
    {
        "key": "alt+cmd+up",
        "command": "-editor.action.insertCursorAbove",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+alt+p",
        "command": "editor.action.insertCursorAbove",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+cmd+down",
        "command": "-editor.action.insertCursorBelow",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+alt+n",
        "command": "editor.action.insertCursorBelow",
        "when": "editorTextFocus"
    },
    // cursor/select/delete by word (left and right)
    {
        "key": "alt+right",
        "command": "cursorWordEndRight",
        "when": "textInputFocus"
    },
    {
        "key": "alt+right",
        "command": "-cursorWordEndRight",
        "when": "textInputFocus"
    },
    {
        "key": "alt+f",
        "command": "cursorWordEndRight",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+alt+right",
        "command": "-cursorWordEndRight",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+b",
        "command": "cursorWordStartLeft",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+alt+left",
        "command": "-cursorWordStartLeft",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+d",
        "command": "deleteWordPartRight",
        "when": "textInputFocus && !editorReadonly"
    },
    {
        "key": "ctrl+alt+delete",
        "command": "-deleteWordPartRight",
        "when": "textInputFocus && !editorReadonly"
    },
    {
        "key": "ctrl+alt+d",
        "command": "deleteWordRight",
        "when": "textInputFocus && !editorReadonly"
    },
    {
        "key": "alt+delete",
        "command": "-deleteWordRight",
        "when": "textInputFocus && !editorReadonly"
    },
    {
        "key": "shift+alt+f",
        "command": "cursorWordPartRightSelect",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+shift+alt+right",
        "command": "-cursorWordPartRightSelect",
        "when": "textInputFocus"
    },
    {
        "key": "shift+alt+b",
        "command": "cursorWordPartLeftSelect",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+shift+alt+left",
        "command": "-cursorWordPartLeftSelect",
        "when": "textInputFocus"
    },
    {
        "key": "shift+alt+f",
        "command": "-editor.action.formatDocument",
        "when": "editorHasDocumentFormattingProvider && editorHasDocumentFormattingProvider && editorTextFocus && !editorReadonly"
    },
    {
        "key": "shift+alt+f",
        "command": "-editor.action.formatDocument.none",
        "when": "editorTextFocus && !editorHasDocumentFormattingProvider && !editorHasDocumentFormattingProvider && !editorReadonly"
    },
    {
        "key": "shift+alt+f",
        "command": "-notebook.format",
        "when": "!editorTextFocus && activeEditor == 'workbench.editor.notebook'"
    },
    {
        "key": "shift+alt+f",
        "command": "-filesExplorer.findInFolder",
        "when": "explorerResourceIsFolder && explorerViewletVisible && filesExplorerFocus && !inputFocus"
    },
    // smart select (expand selection to current word/inside qoutes/brackets)
    {
        "key": "shift+cmd+space",
        "command": "-editor.action.triggerParameterHints",
        "when": "editorHasSignatureHelpProvider && editorTextFocus"
    },
    {
        "key": "shift+cmd+space",
        "command": "editor.action.smartSelect.expand",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+shift+cmd+right",
        "command": "-editor.action.smartSelect.expand",
        "when": "editorTextFocus"
    },
    // navigate back and forwards through time
    {
        "key": "ctrl+[",
        "command": "workbench.action.navigateBack"
    },
    {
        "key": "ctrl+-",
        "command": "-workbench.action.navigateBack"
    },
    {
        "key": "ctrl+]",
        "command": "workbench.action.navigateForward"
    },
    {
        "key": "ctrl+shift+-",
        "command": "-workbench.action.navigateForward"
    },
    // activity bar toggle
    {
        "key": "shift+cmd+b",
        "command": "-workbench.action.tasks.build"
    },
    {
        "key": "shift+cmd+b",
        "command": "workbench.action.toggleActivityBarVisibility"
    },
    // tasks
    {
        "key": "cmd+shift+r",
        "command": "workbench.action.tasks.runTask",
        "args": "run"
    },
    {
        "key": "ctrl+alt+space",
        "command": "-toggleSuggestionFocus",
        "when": "suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "alt+space",
        "command": "editor.action.triggerSuggest",
        "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly"
    },
    {
        "key": "ctrl+space",
        "command": "-editor.action.triggerSuggest",
        "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly"
    },
    {
        "key": "alt+space",
        "command": "toggleSuggestionDetails",
        "when": "suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "ctrl+space",
        "command": "-toggleSuggestionDetails",
        "when": "suggestWidgetVisible && textInputFocus"
    }
]
